//
// 
// PLEASE DO NOT EDIT THIS FILE. AUTO-GENERATED.
//


	case MATH_SUBTRACT_1 : { 
		Math math_instance;
		math_subtract_1_in_t math_subtract_1_input;
		math_subtract_1_out_t math_subtract_1_output;
		Json::Value JRes;
		int index = 0;
		math_subtract_1_input.first = JsonReq["params"]["first"].asInt();
		math_subtract_1_input.second = JsonReq["params"]["second"].asInt();
		jsonError = math_instance.subtract_1(math_subtract_1_input , math_subtract_1_output);
		JRes["result"] = math_subtract_1_output.result;
		JsonRes["result"] = JRes["result"];
	}
	break;
	case MATH_SUBTRACT_2 : { 
		Math math_instance;
		math_subtract_2_in_t math_subtract_2_input;
		math_subtract_2_out_t math_subtract_2_output;
		Json::Value JRes;
		int index = 0;
		math_subtract_2_input.first = JsonReq["params"]["first"].asInt();
		math_subtract_2_input.second = JsonReq["params"]["second"].asInt();
		jsonError = math_instance.subtract_2(math_subtract_2_input , math_subtract_2_output);
		JRes["first"] = math_subtract_2_output.first;
		JRes["second"] = math_subtract_2_output.second;
		JRes["third"] = math_subtract_2_output.third;
		JsonRes["result"] = JRes;
	}
	break;
	case MATH_SUBTRACT_3 : { 
		Math math_instance;
		math_subtract_3_in_t math_subtract_3_input;
		math_subtract_3_out_t math_subtract_3_output;
		Json::Value JRes;
		int index = 0;
		math_subtract_3_input.first = JsonReq["params"]["first"].asInt();
		math_subtract_3_input.second = JsonReq["params"]["second"].asInt();
		math_subtract_3_input.third = JsonReq["params"]["third"].asInt();
		jsonError = math_instance.subtract_3(math_subtract_3_input , math_subtract_3_output);
		JRes["first"] = math_subtract_3_output.first;
		JRes["second"] = math_subtract_3_output.second;
		JsonRes["result"] = JRes;
	}
	break;
	case MATH_SUBTRACT_4 : { 
		Math math_instance;
		math_subtract_4_in_t math_subtract_4_input;
		math_subtract_4_out_t math_subtract_4_output;
		Json::Value JRes;
		int index = 0;           
        int JReq_1_count = 3;
        const Json::Value JReq_1 = JsonReq.get ("params",0);;
        for(index=0; index < JReq_1.size(); ++index) {
            if ( index  >= JReq_1_count ) break;
            math_subtract_4_input.first[index] = JReq_1[index].asInt();
        }

		jsonError = math_instance.subtract_4(math_subtract_4_input , math_subtract_4_output);            
        for(index=0; index < 3; ++index) 
            JsonRes["result"][index] = math_subtract_4_output.first[index];

	}
	break;
	case MATH_SUBTRACT_5 : { 
		Math math_instance;
		math_subtract_5_in_t math_subtract_5_input;
		math_subtract_5_out_t math_subtract_5_output;
		Json::Value JRes;
		int index = 0;            
        int JReq_1_count = 3;
        const Json::Value JReq_1 = JsonReq["params"]["first"];
        for(index=0; index < JReq_1.size(); ++index) {
            if ( index  >= JReq_1_count ) break;
            math_subtract_5_input.first[index] = JReq_1[index].asInt();
        }
            
        int JReq_2_count = 3;
        const Json::Value JReq_2 = JsonReq["params"]["second"];
        for(index=0; index < JReq_2.size(); ++index) {
            if ( index  >= JReq_2_count ) break;
            math_subtract_5_input.second[index] = JReq_2[index].asInt();
        }

		jsonError = math_instance.subtract_5(math_subtract_5_input , math_subtract_5_output);           
        for(index=0; index < 3; ++index) 
            JRes["first"][index] = math_subtract_5_output.first[index];
           
        for(index=0; index < 8; ++index) 
            JRes["second"][index] = math_subtract_5_output.second[index];

		JsonRes["result"] = JRes;
	}
	break;
	case MATH_SUBTRACT_6 : { 
		Math math_instance;
		math_subtract_6_in_t math_subtract_6_input;
		math_subtract_6_out_t math_subtract_6_output;
		Json::Value JRes;
		int index = 0;            
        simple_struct_t first_in_1;
        simple_struct_de_serialize(JsonReq["params"]["first"], first_in_1 , 0);

		(void) math_instance.subtract_6_in_1(math_subtract_6_input , first_in_1);
		jsonError = math_instance.subtract_6(math_subtract_6_input , math_subtract_6_output);            
        simple_struct_t first_out_1;
        (void) math_instance.subtract_6_out_1(math_subtract_6_output , first_out_1); 
        simple_struct_de_serialize(JsonRes["result"]["first"], first_out_1 , 1);

	}
	break;
	case MATH_SUBTRACT_7 : { 
		Math math_instance;
		math_subtract_7_in_t math_subtract_7_input;
		math_subtract_7_out_t math_subtract_7_output;
		Json::Value JRes;
		int index = 0;            
        simple_struct_t first_in_1;
        simple_struct_de_serialize(JsonReq["params"]["first"], first_in_1 , 0);

		(void) math_instance.subtract_7_in_1(math_subtract_7_input , first_in_1);            
        simple_struct_t second_in_2;
        simple_struct_de_serialize(JsonReq["params"]["second"], second_in_2 , 0);

		(void) math_instance.subtract_7_in_2(math_subtract_7_input , second_in_2);
		jsonError = math_instance.subtract_7(math_subtract_7_input , math_subtract_7_output);            
        simple_struct_t first_out_1;
        (void) math_instance.subtract_7_out_1(math_subtract_7_output , first_out_1); 
        simple_struct_de_serialize(JRes["first"], first_out_1 , 1);
            
        simple_struct_t second_out_2;
        (void) math_instance.subtract_7_out_2(math_subtract_7_output , second_out_2); 
        simple_struct_de_serialize(JRes["second"], second_out_2 , 1);

		JsonRes["result"] = JRes;
	}
	break;